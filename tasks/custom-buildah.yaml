apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: image-build
  name: custom-buildah
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    Buildah task builds source into a container image and then pushes it to a
    container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: quay.io/buildah/stable:v1.33.2
      # - default: >-
      #     registry.redhat.io/rhel8/buildah@sha256:3c2ea396a114221575a4031d90d28c43563f7b96288374e0ba8b22de3ed97b5a
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: "true"
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: oci
      description: "The format of the built container, oci or docker"
      name: FORMAT
      type: string
    - default: ""
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string
    - default: ""
      description: Extra parameters passed for the push command when pushing images.
      name: PUSH_EXTRA_ARGS
      type: string
    - name: allIntegrationServerNames
      type: string
      default: ""
      description: all names for integration serverse
    - name: CHANGE_REQUEST
      type: string
      default: ""
      description: Change request name
    - name: allBarNames
      type: string
      description: array of arrays - list of bars

  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
  steps:
    - image: $(params.BUILDER_IMAGE)
      name: build
      resources: {}
      env:
        - name: ALL_INTEGRATION_SERVER_NAMES
          value: $(params.allIntegrationServerNames)
        - name: IMAGE
          value: $(params.IMAGE)
        - name: CHANGE_REQUEST
          value: $(params.CHANGE_REQUEST)
        - name: ALL_BAR_NAMES
          value: $(params.allBarNames)
      script: |
        function deserialize_array() {
          IFS="${3:-$'\x01'}" read -r -a "${2}" <<<"${!1}" # -a => split on IFS
        }

        deserialize_array ALL_INTEGRATION_SERVER_NAMES allIntegrationServerNames '|'
        echo "allIntegrationServerNames: $allIntegrationServerNames"

        deserialize_array ALL_BAR_NAMES allBarNames '|'
        echo "allBarNames: ${allBarNames[@]}"

        echo "=================="
        ls

        for idx in "${!allIntegrationServerNames[@]}"; do
          echo "=================="
          name="${allIntegrationServerNames[$idx]}"
          echo $name
          fullImage="$IMAGE/$name:$CHANGE_REQUEST"
          echo "full image name: ${fullImage}"
          rm -rf ./build-docker/
          mkdir build-docker
          cd build-docker


        done

      # securityContext:
      #   privileged: true
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source
