apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-projects-to-clone
spec:
  params:
    - name: isServerList
      default: []
      description: Aray of IntegrationServer yamls
      type: array
    - name: config-repo-dirname
      type: string
  results:
    - name: projects
      type: array
  steps:
    - name: parse-source-properties
      image: image-registry.openshift-image-registry.svc:5000/vadym/sh-tools
      args:
        - $(params.isServerList[*])
      script: |
        #!/usr/bin/env bash
        set -ex

        integrationservers=()
        projects=()

        extract_projects() {
          yaml_file=$1
          new_projects=$(yq e '.metadata.annotations.ab-bars[].projects[]' "$yaml_file" 2>/dev/null)
          
          if [ -n "$new_projects" ]; then
              # Add the extracted projects to the array variable
              projects+=($new_projects)
          fi
        }

        for file in $@; do
          integration_server_yaml_path="$(workspaces.input.path)/$(params.config-repo-dirname)/$file"
          extract_projects $integration_server_yaml_path

          imageName=$(yq e '.metadata.annotations.ab-image-name' "$yaml_file" 2>/dev/null)

          integrationServerName=$(yq e '.metadata.name' "$yaml_file" 2>/dev/null)
          integrationservers+=($integrationServerName)
        done

        writeJSONArray() {
          local result_path=$1
          shift
          local array=( "$@" )

          # Build a JSON array manually
          jsonArray="["
          for item in "${array[@]}"; do
              jsonArray+="\"$item\","
          done
          jsonArray="${jsonArray%,}"  # Remove the trailing comma
          jsonArray+="]"

          echo -n $jsonArray > $result_path
        }

        writeJSONArray $(results.projects.path) "${projects[@]}"

        echo $integrationservers
  workspaces:
    - name: input
