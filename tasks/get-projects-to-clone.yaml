apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-projects-to-clone
spec:
  params:
    - name: isServerList
      default: []
      description: Aray of IntegrationServer yamls
      type: array
    - name: config-repo-dirname
      type: string
  results:
    - name: projects
      type: array
    - name: integrationServerNames
      type: string
    - name: barNames
      type: string
    - name: isProjects
      type: array
  steps:
    - name: parse-source-properties
      image: image-registry.openshift-image-registry.svc:5000/vadym/sh-tools
      args:
        - $(params.isServerList[*])
      script: |
        #!/usr/bin/env bash
        set -ex

        bash --version

        allintegrationservers=()
        declare -a integrationServers=()
        allProjects=()
        isProjects=()

        function serialize_array() {
          declare -n _array="${1}" _str="${2}" # _array, _str => local reference vars
          local IFS="${3:-$'\x01'}"
          # shellcheck disable=SC2034 # Reference vars assumed used by caller
          _str="${_array[*]}" # * => join on IFS
        }

        function deserialize_array() {
          IFS="${3:-$'\x01'}" read -r -a "${2}" <<<"${!1}" # -a => split on IFS
        }

        extract_all_projects() {
          yaml="$1"
          new_projects=$(echo "$yaml" | yq e '.[].projects[]')
          
          echo "==========================="
          newProjects=($(echo "$yaml" | yq eval '.[].projects[]' | tr '\n' ',' | sed 's/,$//'))
          echo -n $newProjects
          echo "==========================="

          if [ -n "$new_projects" ]; then
              # Add the extracted projects to the array variable
              allProjects+=($new_projects)
          fi
        }

        # store all bar names
        declare -a allBarNames
        idx=0
        for file in $@; do
          integration_server_yaml_path="$(workspaces.input.path)/$(params.config-repo-dirname)/$file"
          barsYAML=$(yq eval '.metadata.annotations.ab-bars-yaml' "$integration_server_yaml_path" | yq eval '.')
          extract_all_projects "$barsYAML"

          imageName=$(yq e '.metadata.annotations.ab-image-name' "$integration_server_yaml_path" 2>/dev/null)

          integrationServerName=$(yq e '.metadata.name' "$integration_server_yaml_path" 2>/dev/null)
          allintegrationservers+=($integrationServerName)

          # get bars for for specific yaml file
          bars=($(echo "$barsYAML" | yq e '.[].bar-name' 2>/dev/null))
          echo "BARS: ${bars[@]}"
          # create a array string separated by ;
          serialize_array bars serializedBars ';'
          allBarNames["$idx"]=$serializedBars
          
          declare -a allBars

          # loop over bars
          for i in "${!bars[@]}"; do
            projects=($(echo "$barsYAML" | yq e ".[$i].projects | join(\";\")" 2>/dev/null))
            allBars["$i"]=${projects[@]}
          done

          serialize_array allBars serialized_data '|'
          integrationServers["$idx"]=$serialized_data

          # increment index
          echo idx: $idx
          ((idx=idx+1))
        done

        writeJSONArray() {
          local result_path=$1
          shift
          local array=( "$@" )

          # Build a JSON array manually
          jsonArray="["
          for item in "${array[@]}"; do
              jsonArray+="\"$item\","
          done
          jsonArray="${jsonArray%,}"  # Remove the trailing comma
          jsonArray+="]"

          echo -n $jsonArray > $result_path
        }

        writeJSONArray $(results.projects.path) "${allProjects[@]}"

        serialize_array allintegrationservers serializedIntegrationServerNames '|'
        echo -n $serializedIntegrationServerNames > $(results.integrationServerNames.path)
        serialize_array allBarNames serializedAllBarNames '|'
        echo -n $serializedAllBarNames > $(results.barNames.path)

        writeJSONArray $(results.isProjects.path) "${integrationServers[@]}"
  workspaces:
    - name: input
