apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-bar
spec:
  params:
    - name: is-source-directory
      type: string
      description: directory where ACE source is located, relative to workspace
    - name: is-application-names
      type: string
      description: name list of bars
    - name: barNames
      type: string
      description: name list of bars
    - name: is-projects
      type: array
      description: array of arrays - list of projects

  steps:
    - image: cp.icr.io/cp/appc/ace-server-prod@sha256:d0e4347ce61007aaba0242e26ac5f0dc82296cfbc59857170c7059e2f4e4b4fc
      name: generate-bar
      env:
        - name: ALL_BAR_NAMES
          value: $(params.barNames)
      args:
        - $(params.is-projects[*])
      script: |
        #!/usr/bin/env bash

        function deserialize_array() {
          IFS="${3:-$'\x01'}" read -r -a "${2}" <<<"${!1}" # -a => split on IFS
        }

        deserialize_array ALL_BAR_NAMES allBarNames '|'

        rm -rf $(workspaces.workspace.path)/bars
        mkdir -p $(workspaces.workspace.path)/bars

        . /opt/ibm/ace-12/server/bin/mqsiprofile

        ls $(workspaces.workspace.path)/bars/

        index=0
        for integrationServer in $@; do
          deserialize_array allBarNames[index] barNames ';'

          deserialize_array integrationServer barsArray '|'

          for barIndex in "${!barsArray[@]}"; do
            # clear source folder
            rm -rf $(workspaces.workspace.path)/source
            mkdir $(workspaces.workspace.path)/source
            project_options=""

            echo "barIndex: ${barIndex}"
            echo "barsList: ${barsArray[barIndex]}"

            deserialize_array barsArray[barIndex] projects ';'

            echo "============"
            for project in "${projects[@]}"; do
                echo "project in bar list: ${project}"
                cp -r $(workspaces.workspace.path)/$(params.is-source-directory)/${project} $(workspaces.workspace.path)/source/
                project_options="--project ${project} ${project_options}"
            done

            echo "============"
            echo "project_options: ${project_options}"

            # list copied folders
            echo "============"
            echo "list copied folders:"
            ls $(workspaces.workspace.path)/source

            echo "============"
            echo "BAR NAME: ${barNames[barIndex]}"

            ibmint package \
              --input-path $(workspaces.workspace.path)/source \
              --output-bar-file $(workspaces.workspace.path)/bars/${barNames[barIndex]}.bar
          done

          let "index++"
        done

        echo "============"
        echo "list files:"
        ls $(workspaces.workspace.path)/bars/
  workspaces:
    - name: workspace
