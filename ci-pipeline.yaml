apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: ci-pipeline
  namespace: vadym
spec:
  params:
    - name: app-repo-url
      type: string
      default: https://github.com/VadimDez/apps-ab.git
      description: "SSH url of ACE source repository, ex: git@github.com:ace-prod-ref/create-customer.git"

    - name: is-infra-repo-url
      type: string
      default: https://github.com/VadimDez/ace-infra.git
      description: "SSH url of Infrastructure repository, ex: git@github.com:ace-prod-ref/ace-infra.git"

    - name: config-repo-url
      type: string
      default: https://github.com/VadimDez/config-repo-ab.git
      description: "SSH url of Configuration repository"

    - name: app-repo-private-key
      type: string
      default: '""'

    - name: ace-base-image
      type: string
      default: cp.icr.io/cp/appc/ace-server-prod@sha256:1753d66293e51d8453acceb5194a8816fd9010caec7c770d07e6623b10fd3976
      description: "Base image for App Connect Interprise."

    - name: nexus-user
      description: User for Nexus
      type: string
      default: admin

    - name: nexus-password
      description: Password for Nexus
      type: string

    - name: nexus-url
      description: "Nexus Repository URL: http://domain only"
      type: string
      default: http://vadym-nexusrepo-sonatype-nexus-service.vadym.svc.cluster.local:8081

    - name: nexus-repo
      description: "Nexus Folder"
      default: vadym
      type: string

    - name: isServerList
      description: "List of IntegrationServer yamls to build"
      type: array

    - name: changeRequest
      description: "Change request"
      type: string

  workspaces:
    - name: shared-workspace
    - name: app-repo-secret
    - name: infra-repo-secret

  tasks:
    - name: clone-config-repo
      params:
        - name: url
          value: $(params.config-repo-url)
        - name: subdirectory
          value: is-config
        - name: deleteExisting
          value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: get-projects-to-clone
      params:
        - name: isServerList
          value: $(params.isServerList[*])
        - name: config-repo-dirname
          value: is-config
      runAfter:
        - clone-config-repo
      taskRef:
        kind: Task
        name: get-projects-to-clone
      workspaces:
        - name: input
          workspace: shared-workspace

    - name: clone-app-repo
      params:
        - name: url
          value: $(params.app-repo-url)
        - name: subdirectory
          value: is-source
        - name: deleteExisting
          value: "true"
        - name: foldersToClone
          value: $(tasks.get-projects-to-clone.results.projects[*])
      runAfter:
        - get-projects-to-clone
      taskRef:
        kind: Task
        name: git-sparse-clone
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: app-repo-secret
          workspace: app-repo-secret

    - name: clone-is-infra-repo
      params:
        - name: url
          value: $(params.is-infra-repo-url)
        - name: subdirectory
          value: is-infra
        - name: deleteExisting
          value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: infra-repo-secret

    - name: resolve-props
      params:
        - name: is-source-directory
          value: is-source
      runAfter:
        - clone-is-infra-repo
        - clone-app-repo
      taskRef:
        kind: Task
        name: resolve-props
      workspaces:
        - name: input
          workspace: shared-workspace

    - name: build-bar
      params:
        - name: is-source-directory
          value: is-source
        - name: is-application-names
          value: $(tasks.get-projects-to-clone.results.integrationServerNames)
        - name: barNames
          value: $(tasks.get-projects-to-clone.results.barNames)
        - name: is-projects
          value: ["$(tasks.get-projects-to-clone.results.isProjects[*])"]
      runAfter:
        - resolve-props
      taskRef:
        kind: Task
        name: build-bar
      workspaces:
        - name: workspace
          workspace: shared-workspace

    - name: build-is-image
      params:
        - name: BUILD_EXTRA_ARGS
          value: --build-arg BASE=$(params.ace-base-image)
        - name: TLSVERIFY
          value: "false"
        - name: IMAGE
          value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)
          # value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)/$(tasks.resolve-props.results.is-release-name):$(tasks.clone-app-repo.results.commit)
        - name: DOCKERFILE
          value: $(workspaces.source.path)/is-infra/Dockerfile
        - name: CONTEXT
          value: $(workspaces.source.path)/bars
        - name: allIntegrationServerNames
          value: $(tasks.get-projects-to-clone.results.integrationServerNames)
        - name: CHANGE_REQUEST
          value: $(params.changeRequest)
        - name: allBarNames
          value: $(tasks.get-projects-to-clone.results.barNames)
      runAfter:
        - build-bar
      taskRef:
        kind: Task
        name: custom-buildah
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: build-integration-server
      params:
        - name: isServerList
          value: $(params.isServerList[*])
        - name: imageNames
          value: $(tasks.build-is-image.imageNames)
      #     - name: is_manifest_template
      #       value: "$(workspaces.input.path)/is-infra/IntegrationServer.yaml"
      #     - name: destination_is_manifest
      #       value: "$(workspaces.input.path)/integrationServer-$(tasks.resolve-props.results.is-release-name).yaml"
      #     - name: configurations
      #       value: $(tasks.resolve-props.results.is-configurations)
      #     - name: name
      #       value: $(tasks.resolve-props.results.is-release-name)
      #     - name: license
      #       value: $(tasks.resolve-props.results.is-license)
      #     - name: license-use
      #       value: $(tasks.resolve-props.results.is-license-use)
      #     - name: service-endpoint-type
      #       value: $(tasks.resolve-props.results.is-service-endpoint-type)
      #     - name: image
      #       value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)/$(tasks.resolve-props.results.is-release-name):$(tasks.clone-app-repo.results.commit)
      #     - name: version
      #       value: $(tasks.resolve-props.results.is-version)
      #     - name: user-home
      #       value: "/root"
      #     - name: branch_name
      #       value: $(context.pipeline.name)-$(context.pipelineRun.name)
      runAfter:
        - build-is-image
      taskRef:
        kind: Task
        name: build-integration-server
      workspaces:
        - name: input
          workspace: shared-workspace

    # - name: nexus-upload
    #   params:
    #     - name: nexus-user
    #       value: $(params.nexus-user)
    #     - name: nexus-password
    #       value: $(params.nexus-password)
    #     - name: nexus-url
    #       value: $(params.nexus-url)
    #     - name: nexus-repo
    #       value: $(params.nexus-repo)
    #     - name: configurations
    #       value: $(tasks.resolve-props.results.is-configurations)
    #     - name: destination_is_manifest
    #       value: "$(workspaces.workspace.path)/integrationServer-$(tasks.resolve-props.results.is-release-name).yaml"
    #     - name: is-infra-directory
    #       value: "$(workspaces.workspace.path)/is-infra"

    #   taskRef:
    #     kind: Task
    #     name: nexus-upload
    #   runAfter:
    #     - build-integration-server
    #   workspaces:
    #     - name: workspace
    #       workspace: shared-workspace
